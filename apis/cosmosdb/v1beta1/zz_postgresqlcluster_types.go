// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MaintenanceWindowInitParameters struct {

	// The day of week for maintenance window, where the week starts on a Sunday, i.e. Sunday = 0, Monday = 1. Defaults to 0.
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// The start hour for maintenance window. Defaults to 0.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// The start minute for maintenance window. Defaults to 0.
	StartMinute *float64 `json:"startMinute,omitempty" tf:"start_minute,omitempty"`
}

type MaintenanceWindowObservation struct {

	// The day of week for maintenance window, where the week starts on a Sunday, i.e. Sunday = 0, Monday = 1. Defaults to 0.
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// The start hour for maintenance window. Defaults to 0.
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// The start minute for maintenance window. Defaults to 0.
	StartMinute *float64 `json:"startMinute,omitempty" tf:"start_minute,omitempty"`
}

type MaintenanceWindowParameters struct {

	// The day of week for maintenance window, where the week starts on a Sunday, i.e. Sunday = 0, Monday = 1. Defaults to 0.
	// +kubebuilder:validation:Optional
	DayOfWeek *float64 `json:"dayOfWeek,omitempty" tf:"day_of_week,omitempty"`

	// The start hour for maintenance window. Defaults to 0.
	// +kubebuilder:validation:Optional
	StartHour *float64 `json:"startHour,omitempty" tf:"start_hour,omitempty"`

	// The start minute for maintenance window. Defaults to 0.
	// +kubebuilder:validation:Optional
	StartMinute *float64 `json:"startMinute,omitempty" tf:"start_minute,omitempty"`
}

type PostgreSQLClusterInitParameters struct {

	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 8.3, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 10.0, 10.1, 10.2, 11.0, 11.1 and 11.2.
	CitusVersion *string `json:"citusVersion,omitempty" tf:"citus_version,omitempty"`

	// Is public access enabled on coordinator? Defaults to true.
	CoordinatorPublicIPAccessEnabled *bool `json:"coordinatorPublicIpAccessEnabled,omitempty" tf:"coordinator_public_ip_access_enabled,omitempty"`

	// The edition of the coordinator server. Possible values are BurstableGeneralPurpose, BurstableMemoryOptimized, GeneralPurpose and MemoryOptimized. Defaults to GeneralPurpose.
	CoordinatorServerEdition *string `json:"coordinatorServerEdition,omitempty" tf:"coordinator_server_edition,omitempty"`

	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608 and 16777216.
	CoordinatorStorageQuotaInMb *float64 `json:"coordinatorStorageQuotaInMb,omitempty" tf:"coordinator_storage_quota_in_mb,omitempty"`

	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 1, 2, 4, 8, 16, 32, 64 and 96.
	CoordinatorVcoreCount *float64 `json:"coordinatorVcoreCount,omitempty" tf:"coordinator_vcore_count,omitempty"`

	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to false.
	HaEnabled *bool `json:"haEnabled,omitempty" tf:"ha_enabled,omitempty"`

	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A maintenance_window block as defined below.
	MaintenanceWindow []MaintenanceWindowInitParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between 0 and 20 except 1.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// Is public access enabled on worker nodes. Defaults to false.
	NodePublicIPAccessEnabled *bool `json:"nodePublicIpAccessEnabled,omitempty" tf:"node_public_ip_access_enabled,omitempty"`

	// The edition of the node server. Possible values are BurstableGeneralPurpose, BurstableMemoryOptimized, GeneralPurpose and MemoryOptimized. Defaults to MemoryOptimized.
	NodeServerEdition *string `json:"nodeServerEdition,omitempty" tf:"node_server_edition,omitempty"`

	// The storage quota in MB on each worker node. Possible values are 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608 and 16777216.
	NodeStorageQuotaInMb *float64 `json:"nodeStorageQuotaInMb,omitempty" tf:"node_storage_quota_in_mb,omitempty"`

	// The vCores count on each worker node. Possible values are 1, 2, 4, 8, 16, 32, 64, 96 and 104.
	NodeVcores *float64 `json:"nodeVcores,omitempty" tf:"node_vcores,omitempty"`

	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	PointInTimeInUtc *string `json:"pointInTimeInUtc,omitempty" tf:"point_in_time_in_utc,omitempty"`

	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	PreferredPrimaryZone *string `json:"preferredPrimaryZone,omitempty" tf:"preferred_primary_zone,omitempty"`

	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are 11, 12, 13, 14 and 15.
	SQLVersion *string `json:"sqlVersion,omitempty" tf:"sql_version,omitempty"`

	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	ShardsOnCoordinatorEnabled *bool `json:"shardsOnCoordinatorEnabled,omitempty" tf:"shards_on_coordinator_enabled,omitempty"`

	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceLocation *string `json:"sourceLocation,omitempty" tf:"source_location,omitempty"`

	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceResourceID *string `json:"sourceResourceId,omitempty" tf:"source_resource_id,omitempty"`

	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PostgreSQLClusterObservation struct {

	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 8.3, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 10.0, 10.1, 10.2, 11.0, 11.1 and 11.2.
	CitusVersion *string `json:"citusVersion,omitempty" tf:"citus_version,omitempty"`

	// Is public access enabled on coordinator? Defaults to true.
	CoordinatorPublicIPAccessEnabled *bool `json:"coordinatorPublicIpAccessEnabled,omitempty" tf:"coordinator_public_ip_access_enabled,omitempty"`

	// The edition of the coordinator server. Possible values are BurstableGeneralPurpose, BurstableMemoryOptimized, GeneralPurpose and MemoryOptimized. Defaults to GeneralPurpose.
	CoordinatorServerEdition *string `json:"coordinatorServerEdition,omitempty" tf:"coordinator_server_edition,omitempty"`

	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608 and 16777216.
	CoordinatorStorageQuotaInMb *float64 `json:"coordinatorStorageQuotaInMb,omitempty" tf:"coordinator_storage_quota_in_mb,omitempty"`

	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 1, 2, 4, 8, 16, 32, 64 and 96.
	CoordinatorVcoreCount *float64 `json:"coordinatorVcoreCount,omitempty" tf:"coordinator_vcore_count,omitempty"`

	// The earliest restore point time (ISO8601 format) for the Azure Cosmos DB for PostgreSQL Cluster.
	EarliestRestoreTime *string `json:"earliestRestoreTime,omitempty" tf:"earliest_restore_time,omitempty"`

	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to false.
	HaEnabled *bool `json:"haEnabled,omitempty" tf:"ha_enabled,omitempty"`

	// The ID of the Azure Cosmos DB for PostgreSQL Cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A maintenance_window block as defined below.
	MaintenanceWindow []MaintenanceWindowObservation `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between 0 and 20 except 1.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// Is public access enabled on worker nodes. Defaults to false.
	NodePublicIPAccessEnabled *bool `json:"nodePublicIpAccessEnabled,omitempty" tf:"node_public_ip_access_enabled,omitempty"`

	// The edition of the node server. Possible values are BurstableGeneralPurpose, BurstableMemoryOptimized, GeneralPurpose and MemoryOptimized. Defaults to MemoryOptimized.
	NodeServerEdition *string `json:"nodeServerEdition,omitempty" tf:"node_server_edition,omitempty"`

	// The storage quota in MB on each worker node. Possible values are 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608 and 16777216.
	NodeStorageQuotaInMb *float64 `json:"nodeStorageQuotaInMb,omitempty" tf:"node_storage_quota_in_mb,omitempty"`

	// The vCores count on each worker node. Possible values are 1, 2, 4, 8, 16, 32, 64, 96 and 104.
	NodeVcores *float64 `json:"nodeVcores,omitempty" tf:"node_vcores,omitempty"`

	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	PointInTimeInUtc *string `json:"pointInTimeInUtc,omitempty" tf:"point_in_time_in_utc,omitempty"`

	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	PreferredPrimaryZone *string `json:"preferredPrimaryZone,omitempty" tf:"preferred_primary_zone,omitempty"`

	// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are 11, 12, 13, 14 and 15.
	SQLVersion *string `json:"sqlVersion,omitempty" tf:"sql_version,omitempty"`

	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	ShardsOnCoordinatorEnabled *bool `json:"shardsOnCoordinatorEnabled,omitempty" tf:"shards_on_coordinator_enabled,omitempty"`

	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceLocation *string `json:"sourceLocation,omitempty" tf:"source_location,omitempty"`

	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	SourceResourceID *string `json:"sourceResourceId,omitempty" tf:"source_resource_id,omitempty"`

	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PostgreSQLClusterParameters struct {

	// The password of the administrator login.
	// +kubebuilder:validation:Optional
	AdministratorLoginPasswordSecretRef v1.SecretKeySelector `json:"administratorLoginPasswordSecretRef" tf:"-"`

	// The citus extension version on the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 8.3, 9.0, 9.1, 9.2, 9.3, 9.4, 9.5, 10.0, 10.1, 10.2, 11.0, 11.1 and 11.2.
	// +kubebuilder:validation:Optional
	CitusVersion *string `json:"citusVersion,omitempty" tf:"citus_version,omitempty"`

	// Is public access enabled on coordinator? Defaults to true.
	// +kubebuilder:validation:Optional
	CoordinatorPublicIPAccessEnabled *bool `json:"coordinatorPublicIpAccessEnabled,omitempty" tf:"coordinator_public_ip_access_enabled,omitempty"`

	// The edition of the coordinator server. Possible values are BurstableGeneralPurpose, BurstableMemoryOptimized, GeneralPurpose and MemoryOptimized. Defaults to GeneralPurpose.
	// +kubebuilder:validation:Optional
	CoordinatorServerEdition *string `json:"coordinatorServerEdition,omitempty" tf:"coordinator_server_edition,omitempty"`

	// The coordinator storage allowed for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608 and 16777216.
	// +kubebuilder:validation:Optional
	CoordinatorStorageQuotaInMb *float64 `json:"coordinatorStorageQuotaInMb,omitempty" tf:"coordinator_storage_quota_in_mb,omitempty"`

	// The coordinator vCore count for the Azure Cosmos DB for PostgreSQL Cluster. Possible values are 1, 2, 4, 8, 16, 32, 64 and 96.
	// +kubebuilder:validation:Optional
	CoordinatorVcoreCount *float64 `json:"coordinatorVcoreCount,omitempty" tf:"coordinator_vcore_count,omitempty"`

	// Is high availability enabled for the Azure Cosmos DB for PostgreSQL cluster? Defaults to false.
	// +kubebuilder:validation:Optional
	HaEnabled *bool `json:"haEnabled,omitempty" tf:"ha_enabled,omitempty"`

	// The Azure Region where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	// A maintenance_window block as defined below.
	// +kubebuilder:validation:Optional
	MaintenanceWindow []MaintenanceWindowParameters `json:"maintenanceWindow,omitempty" tf:"maintenance_window,omitempty"`

	// The worker node count of the Azure Cosmos DB for PostgreSQL Cluster. Possible value is between 0 and 20 except 1.
	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// Is public access enabled on worker nodes. Defaults to false.
	// +kubebuilder:validation:Optional
	NodePublicIPAccessEnabled *bool `json:"nodePublicIpAccessEnabled,omitempty" tf:"node_public_ip_access_enabled,omitempty"`

	// The edition of the node server. Possible values are BurstableGeneralPurpose, BurstableMemoryOptimized, GeneralPurpose and MemoryOptimized. Defaults to MemoryOptimized.
	// +kubebuilder:validation:Optional
	NodeServerEdition *string `json:"nodeServerEdition,omitempty" tf:"node_server_edition,omitempty"`

	// The storage quota in MB on each worker node. Possible values are 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608 and 16777216.
	// +kubebuilder:validation:Optional
	NodeStorageQuotaInMb *float64 `json:"nodeStorageQuotaInMb,omitempty" tf:"node_storage_quota_in_mb,omitempty"`

	// The vCores count on each worker node. Possible values are 1, 2, 4, 8, 16, 32, 64, 96 and 104.
	// +kubebuilder:validation:Optional
	NodeVcores *float64 `json:"nodeVcores,omitempty" tf:"node_vcores,omitempty"`

	// The date and time in UTC (ISO8601 format) for the Azure Cosmos DB for PostgreSQL cluster restore. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	PointInTimeInUtc *string `json:"pointInTimeInUtc,omitempty" tf:"point_in_time_in_utc,omitempty"`

	// The preferred primary availability zone for the Azure Cosmos DB for PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	PreferredPrimaryZone *string `json:"preferredPrimaryZone,omitempty" tf:"preferred_primary_zone,omitempty"`

	// The name of the Resource Group where the Azure Cosmos DB for PostgreSQL Cluster should exist. Changing this forces a new resource to be created.
	// +crossplane:generate:reference:type=github.com/upbound/provider-azure/apis/azure/v1beta1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// Reference to a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// Selector for a ResourceGroup in azure to populate resourceGroupName.
	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// The major PostgreSQL version on the Azure Cosmos DB for PostgreSQL cluster. Possible values are 11, 12, 13, 14 and 15.
	// +kubebuilder:validation:Optional
	SQLVersion *string `json:"sqlVersion,omitempty" tf:"sql_version,omitempty"`

	// Is shards on coordinator enabled for the Azure Cosmos DB for PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	ShardsOnCoordinatorEnabled *bool `json:"shardsOnCoordinatorEnabled,omitempty" tf:"shards_on_coordinator_enabled,omitempty"`

	// The Azure region of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	SourceLocation *string `json:"sourceLocation,omitempty" tf:"source_location,omitempty"`

	// The resource ID of the source Azure Cosmos DB for PostgreSQL cluster for read replica clusters. Changing this forces a new resource to be created.
	// +kubebuilder:validation:Optional
	SourceResourceID *string `json:"sourceResourceId,omitempty" tf:"source_resource_id,omitempty"`

	// A mapping of tags which should be assigned to the Azure Cosmos DB for PostgreSQL Cluster.
	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// PostgreSQLClusterSpec defines the desired state of PostgreSQLCluster
type PostgreSQLClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PostgreSQLClusterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PostgreSQLClusterInitParameters `json:"initProvider,omitempty"`
}

// PostgreSQLClusterStatus defines the observed state of PostgreSQLCluster.
type PostgreSQLClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PostgreSQLClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PostgreSQLCluster is the Schema for the PostgreSQLClusters API. Manages an Azure Cosmos DB for PostgreSQL Cluster.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azure}
type PostgreSQLCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.administratorLoginPasswordSecretRef)",message="spec.forProvider.administratorLoginPasswordSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.coordinatorStorageQuotaInMb) || (has(self.initProvider) && has(self.initProvider.coordinatorStorageQuotaInMb))",message="spec.forProvider.coordinatorStorageQuotaInMb is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.coordinatorVcoreCount) || (has(self.initProvider) && has(self.initProvider.coordinatorVcoreCount))",message="spec.forProvider.coordinatorVcoreCount is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.location) || (has(self.initProvider) && has(self.initProvider.location))",message="spec.forProvider.location is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeCount) || (has(self.initProvider) && has(self.initProvider.nodeCount))",message="spec.forProvider.nodeCount is a required parameter"
	Spec   PostgreSQLClusterSpec   `json:"spec"`
	Status PostgreSQLClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PostgreSQLClusterList contains a list of PostgreSQLClusters
type PostgreSQLClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PostgreSQLCluster `json:"items"`
}

// Repository type metadata.
var (
	PostgreSQLCluster_Kind             = "PostgreSQLCluster"
	PostgreSQLCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PostgreSQLCluster_Kind}.String()
	PostgreSQLCluster_KindAPIVersion   = PostgreSQLCluster_Kind + "." + CRDGroupVersion.String()
	PostgreSQLCluster_GroupVersionKind = CRDGroupVersion.WithKind(PostgreSQLCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&PostgreSQLCluster{}, &PostgreSQLClusterList{})
}
